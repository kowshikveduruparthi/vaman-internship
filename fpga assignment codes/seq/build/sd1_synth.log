
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v' to AST representation.
Generating RTLIL representation for module `\Sd1'.
Note: Assuming pure combinatorial block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26.1-61.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64.1-75.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76.1-86.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

-- Running command `tcl /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   0 design levels: Sd1                 
Automatically selected Sd1 as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \Sd1

4.3.3. Analyzing design hierarchy..
Top module:  \Sd1
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$45 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76$10 in module Sd1.
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64$9 in module Sd1.
Marked 6 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26$3 in module Sd1.
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:17$1 in module Sd1.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 4 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$28'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
Found async reset \reset in `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:17$1'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$45'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$28'.
Creating decoders for process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76$10'.
     1/1: $1\detector_out[0:0]
Creating decoders for process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64$9'.
     1/1: $1\amy_jackson[2:0]
Creating decoders for process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26$3'.
     1/6: $6\next_state[2:0]
     2/6: $5\next_state[2:0]
     3/6: $4\next_state[2:0]
     4/6: $3\next_state[2:0]
     5/6: $2\next_state[2:0]
     6/6: $1\next_state[2:0]
Creating decoders for process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:17$1'.
     1/1: $0\current_state[2:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Sd1.\detector_out' from process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76$10'.
No latch inferred for signal `\Sd1.\amy_jackson' from process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64$9'.
No latch inferred for signal `\Sd1.\next_state' from process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26$3'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$45'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$952' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\Sd1.\current_state' using process `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:17$1'.
  created $adff cell `$procdff$953' with positive edge clock and positive level reset.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$45'.
Removing empty process `MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$45'.
Removing empty process `Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$28'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
Removing empty process `Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$27'.
Found and cleaned up 1 empty switch in `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76$10'.
Removing empty process `Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:76$10'.
Found and cleaned up 1 empty switch in `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64$9'.
Removing empty process `Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:64$9'.
Found and cleaned up 6 empty switches in `\Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26$3'.
Removing empty process `Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:26$3'.
Removing empty process `Sd1.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.v:17$1'.
Cleaned up 13 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 4 unused cells and 26 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 6 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$897.
    dead port 2/2 on $mux $procmux$904.
    dead port 2/2 on $mux $procmux$912.
    dead port 2/2 on $mux $procmux$921.
    dead port 2/2 on $mux $procmux$931.
Removed 5 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 1 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 0 unused cells and 12 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
    New ctrl vector for $pmux cell $procmux$934: { $procmux$932_CMP $procmux$913_CMP $procmux$905_CMP $auto$opt_reduce.cc:134:opt_mux$955 }
  Optimizing cells in module \Sd1.
Performed a total of 1 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.10.16. Rerunning OPT passes. (Maybe there is more to do..)

4.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
Performed a total of 0 changes.

4.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.10.23. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.13. Executing CHECK pass (checking for obvious problems).
checking module Sd1..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell Sd1.$procmux$890_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Sd1.$procmux$891_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Sd1.$procmux$892_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell Sd1.$procmux$895 ($mux).
Removed top 1 bits (of 3) from port B of cell Sd1.$procmux$905_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell Sd1.$procmux$910 ($mux).
Removed top 1 bits (of 3) from port B of cell Sd1.$procmux$913_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Sd1.$procmux$922_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell Sd1.$procmux$929 ($mux).
Removed top 2 bits (of 3) from wire Sd1.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire Sd1.$3\next_state[2:0].
Removed top 1 bits (of 3) from wire Sd1.$4\next_state[2:0].

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 4 unused cells and 9 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Sd1:
  created 0 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Sd1.current_state as FSM state register:
    Circuit seems to be self-resetting.

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$opt_reduce.cc:128:opt_mux$954
cell type $auto$pmuxtree.cc:35:or_generator$969
cell type $auto$pmuxtree.cc:35:or_generator$983
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$963
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$965
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$967
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$971
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$977
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$979
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$981
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$985
cell type $procdff$953
cell type $procmux$885
cell type $procmux$886_CMP0
cell type $procmux$889_CMP0
cell type $procmux$890_CMP0
cell type $procmux$891_CMP0
cell type $procmux$892_CMP0
cell type $procmux$895
cell type $procmux$902
cell type $procmux$905_CMP0
cell type $procmux$910
cell type $procmux$913_CMP0
cell type $procmux$922_CMP0
cell type $procmux$929
cell type $procmux$932_CMP0

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 0 unused cells and 2 unused wires.

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$963:
      Old ports: A=3'110, B=3'100, Y=$auto$rtlil.cc:2037:Mux$964
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$964 [1]
      New connections: { $auto$rtlil.cc:2037:Mux$964 [2] $auto$rtlil.cc:2037:Mux$964 [0] } = 2'10
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$965:
      Old ports: A=3'001, B=3'111, Y=$auto$rtlil.cc:2037:Mux$966
      New ports: A=1'0, B=1'1, Y=$auto$rtlil.cc:2037:Mux$966 [1]
      New connections: { $auto$rtlil.cc:2037:Mux$966 [2] $auto$rtlil.cc:2037:Mux$966 [0] } = { $auto$rtlil.cc:2037:Mux$966 [1] 1'1 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$979:
      Old ports: A=3'000, B={ 2'00 \sequence_in }, Y=$auto$rtlil.cc:2037:Mux$980
      New ports: A=1'0, B=\sequence_in, Y=$auto$rtlil.cc:2037:Mux$980 [0]
      New connections: $auto$rtlil.cc:2037:Mux$980 [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$895:
      Old ports: A=2'11, B=2'01, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [1]
      New connections: $3\next_state[2:0] [0] = 1'1
    Consolidated identical input bits for $mux cell $procmux$902:
      Old ports: A=3'011, B=3'110, Y=$5\next_state[2:0]
      New ports: A=2'01, B=2'10, Y={ $5\next_state[2:0] [2] $5\next_state[2:0] [0] }
      New connections: $5\next_state[2:0] [1] = 1'1
    Consolidated identical input bits for $mux cell $procmux$910:
      Old ports: A=2'00, B=2'10, Y=$4\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$4\next_state[2:0] [1]
      New connections: $4\next_state[2:0] [0] = 1'0
  Optimizing cells in module \Sd1.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$981:
      Old ports: A=$auto$rtlil.cc:2037:Mux$980, B={ 1'0 $4\next_state[2:0] }, Y=$auto$rtlil.cc:2037:Mux$982
      New ports: A={ 1'0 $auto$rtlil.cc:2037:Mux$980 [0] }, B={ $4\next_state[2:0] [1] 1'0 }, Y=$auto$rtlil.cc:2037:Mux$982 [1:0]
      New connections: $auto$rtlil.cc:2037:Mux$982 [2] = 1'0
  Optimizing cells in module \Sd1.
Performed a total of 7 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Sd1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Sd1.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Sd1'.
Removed a total of 10 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 3 unused cells and 33 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module Sd1..
  Treeifying 14 MUXes:
    Found tree with 2 MUXes at root \e.
    Found tree with 2 MUXes at root \f.
    Found tree with 1 MUXes at root \g.
    Found tree with 4 MUXes at root \next_state [0].
    Found tree with 3 MUXes at root \next_state [1].
    Found tree with 2 MUXes at root \next_state [2].
    Finished treeification: Found 6 trees.
  Covering trees:
    Replaced tree at \e: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \f: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \g: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \next_state [0]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \next_state [1]: 0 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \next_state [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 1 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module Sd1:

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\Sd1' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 49 wires to a netlist network with 6 inputs and 9 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =      10.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =       9. (  81.82 % of nodes)
ABC: Participating nodes from the second network  =      13. ( 118.18 % of nodes)
ABC: Node pairs (any polarity)                    =       9. (  81.82 % of names can be moved)
ABC: Node pairs (same polarity)                   =       9. (  81.82 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       10
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        9
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 62 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 36 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 10 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 42 objects in module Sd1 (7 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \Sd1

4.46.2. Analyzing design hierarchy..
Top module:  \Sd1
Removed 0 unused modules.

4.47. Printing statistics.

=== Sd1 ===

   Number of wires:                 19
   Number of wire bits:             26
   Number of public wires:          19
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     LUT1                            1
     LUT2                            2
     LUT3                            6
     LUT4                            1
     dffc                            3
     mux4x0                          2

4.48. Executing CHECK pass (checking for obvious problems).
checking module Sd1..
found and reported 0 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on Sd1.clock[0].
Inserting ckpad on Sd1.clock[0].
Inserting $_BUF_ on Sd1.reset[0].
Inserting ckpad on Sd1.reset[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Marking already mapped port: ckpad.P[0].
Marking already mapped port: Sd1.reset[0].
Marking already mapped port: Sd1.clock[0].
Mapping port Sd1.a using outpad.
Mapping port Sd1.b using outpad.
Mapping port Sd1.c using outpad.
Mapping port Sd1.d using outpad.
Mapping port Sd1.detector_out using outpad.
Mapping port Sd1.e using outpad.
Mapping port Sd1.f using outpad.
Mapping port Sd1.g using outpad.
Mapping port Sd1.sequence_in using inpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 0 unused cells and 12 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module Sd1..
found and reported 0 problems.

5. Printing statistics.

=== Sd1 ===

   Number of wires:                 31
   Number of wire bits:             31
   Number of public wires:          26
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     LUT1                            1
     LUT2                            2
     LUT3                            6
     LUT4                            1
     ckpad                           2
     dffc                            3
     inpad                           1
     logic_0                         1
     logic_1                         1
     mux4x0                          2
     outpad                          8

Loading PCF from '/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/sd1/sd1.pcf'...
Loading pinmap CSV from '/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  ckpad      | clock      | 34         | X22Y33   | CLOCK    | $auto$clkbufmap.cc:252:execute$1286
  ckpad      | reset      |            |          |          | $auto$clkbufmap.cc:252:execute$1291
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$Sd1.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$Sd1.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$Sd1.c
  outpad     | d          | 61         | X20Y3    | BIDIR    | $iopadmap$Sd1.d
  outpad     | detector_out | 55         | X30Y3    | BIDIR    | $iopadmap$Sd1.detector_out
  outpad     | e          | 60         | X22Y3    | BIDIR    | $iopadmap$Sd1.e
  outpad     | f          | 59         | X24Y3    | BIDIR    | $iopadmap$Sd1.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$Sd1.g
  inpad      | sequence_in | 56         | X28Y3    | BIDIR    | $iopadmap$Sd1.sequence_in

6. Executing Verilog backend.
Dumping module `\Sd1'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
Using template logic_1 for cells of type logic_1.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\inpad for cells of type inpad.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$20b24abc2a55735494adde193b7d8da3969e539c\ckpad for cells of type ckpad.
Using template $paramod\ckpad\IO_PAD=0'\IO_LOC=0'\IO_TYPE=0' for cells of type ckpad.
Using template dffc for cells of type dffc.
Using template $paramod$029fb7df092d5131df78ff0be68aad451d319cc4\LUT3 for cells of type LUT3.
Using template $paramod$50dc73d66972589f576182ba45a9a07a75bf6d32\LUT4 for cells of type LUT4.
Using template $paramod$88388c6c6a4eecfc7de7604fe66ccab36e5a053a\LUT2 for cells of type LUT2.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$c3eb90a615d9a5a74ac528502e23010b3c580dc0\LUT3 for cells of type LUT3.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module Sd1.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Sd1..
Removed 0 unused cells and 38 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== Sd1 ===

   Number of wires:                143
   Number of wire bits:            143
   Number of public wires:         138
   Number of public wire bits:     138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     BIDIR_CELL                      9
     CLOCK_CELL                      2
     C_FRAG                          1
     F_FRAG                          1
     GMUX_IP                         2
     Q_FRAG                          3
     T_FRAG                         10

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\Sd1'.

Warnings: 8 unique messages, 11 total
End of script. Logfile hash: 65f35ddc33, CPU: user 2.06s system 0.08s, MEM: 274.23 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 74% 18x read_verilog (1 sec), 6% 19x opt_clean (0 sec), ...
