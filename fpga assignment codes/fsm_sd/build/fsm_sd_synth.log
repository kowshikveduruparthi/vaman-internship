
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v' to AST representation.
Generating RTLIL representation for module `\fsm_sd'.
Warning: wire '\a' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:19.16-19.19.
Warning: wire '\b' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:20.16-20.19.
Warning: wire '\c' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:21.16-21.19.
Warning: wire '\d' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:22.16-22.19.
Warning: wire '\e' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:23.16-23.19.
Warning: wire '\f' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:24.16-24.19.
Warning: wire '\g' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:25.16-25.19.
Warning: wire '\y' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:42.29-42.36.
Warning: wire '\a' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44.29-44.73.
Warning: wire '\b' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:45.29-45.34.
Warning: wire '\c' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:46.29-46.47.
Warning: wire '\d' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:47.29-47.34.
Warning: wire '\e' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48.29-48.70.
Warning: wire '\f' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49.29-49.71.
Warning: wire '\g' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50.29-50.88.
Warning: wire '\led' is assigned in a block at /home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:56.30-56.39.
/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:56: Warning: Identifier `\led' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `tcl /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: fsm_sd              
Automatically selected fsm_sd as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \fsm_sd

4.3.3. Analyzing design hierarchy..
Top module:  \fsm_sd
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$131 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1 in module fsm_sd.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 24 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$114'.
  Set init value: \QZ = 1'0
Found init rule in `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:0$96'.
  Set init value: \a = 1'0
  Set init value: \b = 1'0
  Set init value: \c = 1'0
  Set init value: \d = 1'0
  Set init value: \e = 1'0
  Set init value: \f = 1'0
  Set init value: \g = 1'1
  Set init value: \q1 = 3'000
  Set init value: \q2 = 3'000
  Set init value: \q3 = 3'000

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$131'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$114'.
Creating decoders for process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:0$96'.
Creating decoders for process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
     1/16: $1\led[0:0]
     2/16: $1\delay[26:0]
     3/16: $1\g[0:0]
     4/16: $1\f[0:0]
     5/16: $1\e[0:0]
     6/16: $1\d[0:0]
     7/16: $1\c[0:0]
     8/16: $1\b[0:0]
     9/16: $1\a[0:0]
    10/16: $1\y[0:0]
    11/16: $1\d1[2:0]
    12/16: $1\d2[2:0]
    13/16: $1\d3[2:0]
    14/16: $0\q3[2:0]
    15/16: $0\q2[2:0]
    16/16: $0\q1[2:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$131'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1030' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\fsm_sd.\y' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1031' with positive edge clock.
Creating register for signal `\fsm_sd.\a' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1032' with positive edge clock.
Creating register for signal `\fsm_sd.\b' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1033' with positive edge clock.
Creating register for signal `\fsm_sd.\c' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1034' with positive edge clock.
Creating register for signal `\fsm_sd.\d' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1035' with positive edge clock.
Creating register for signal `\fsm_sd.\e' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1036' with positive edge clock.
Creating register for signal `\fsm_sd.\f' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1037' with positive edge clock.
Creating register for signal `\fsm_sd.\g' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1038' with positive edge clock.
Creating register for signal `\fsm_sd.\q1' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1039' with positive edge clock.
Creating register for signal `\fsm_sd.\q2' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1040' with positive edge clock.
Creating register for signal `\fsm_sd.\q3' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1041' with positive edge clock.
Creating register for signal `\fsm_sd.\d1' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1042' with positive edge clock.
Creating register for signal `\fsm_sd.\d2' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1043' with positive edge clock.
Creating register for signal `\fsm_sd.\d3' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1044' with positive edge clock.
Creating register for signal `\fsm_sd.\delay' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1045' with positive edge clock.
Creating register for signal `\fsm_sd.\led' using process `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
  created $dff cell `$procdff$1046' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$131'.
Removing empty process `MULT.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$131'.
Removing empty process `Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$114'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.
Removing empty process `Q_FRAG.$proc$/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$113'.
Removing empty process `fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:0$96'.
Found and cleaned up 1 empty switch in `\fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
Removing empty process `fsm_sd.$proc$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:30$1'.
Cleaned up 6 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 6 unused cells and 61 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 55 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1033 ($dff) from module fsm_sd.
Replaced 1 DFF cells.

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 1 unused cells and 56 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.13. Executing CHECK pass (checking for obvious problems).
checking module fsm_sd..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell fsm_sd.$add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2 ($add).
Removed top 5 bits (of 32) from port Y of cell fsm_sd.$add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2 ($add).
Removed top 7 bits (of 32) from port B of cell fsm_sd.$ge$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:34$3 ($ge).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$5 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$10 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$10 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$10 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$11 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$16 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$18 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$21 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$23 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$25 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$33 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$33 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$33 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$38 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$42 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$42 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$42 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$50 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$50 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$50 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$55 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$56 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$60 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$60 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$60 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49$74 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49$74 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49$74 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$79 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$79 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$79 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$82 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$82 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$82 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$83 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$83 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$84 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$84 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$84 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$86 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$88 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$89 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$92 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$92 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$92 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$93 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$93 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$94 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$94 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$94 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$38 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$38 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$56 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$56 ($or).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$89 ($or).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$89 ($or).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$55 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$55 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$88 ($and).
Removed top 2 bits (of 3) from port A of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$88 ($and).
Removed top 2 bits (of 3) from port Y of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$86 ($and).
Removed top 2 bits (of 3) from port B of cell fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$86 ($and).
Removed top 5 bits (of 32) from wire fsm_sd.$add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$10_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$33_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$35_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$50_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$53_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$55_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$79_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$82_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$83_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$93_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$4_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$15_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$17_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$20_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$38_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$56_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49$74_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$89_Y.
Removed top 2 bits (of 3) from wire fsm_sd.$or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$94_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).
dffcemux pattern in fsm_sd: dff=$procdff$1039, cemux=$procmux$1016, rstmux=n/a; removed top 1 bits.
dffcemux pattern in fsm_sd: dff=$procdff$1039, cemux=$procmux$1016, rstmux=n/a; removed 1 constant bits.

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 0 unused cells and 20 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fsm_sd:
  creating $macc model for $add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2 ($add).
  creating $alu model for $macc $add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2.
  creating $alu model for $ge$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:34$3 ($ge): new $alu
  creating $alu cell for $ge$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:34$3: $auto$alumacc.cc:485:replace_alu$1068
  creating $alu cell for $add$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:33$2: $auto$alumacc.cc:485:replace_alu$1077
  created 2 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 0 unused cells and 1 unused wires.

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$5
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$6
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$7
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$10
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$11
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$12
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$16
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$18
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$21
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$23
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$25
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$33
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$50
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$55
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$79
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$82
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$83
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$86
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$88
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$92
cell type $and$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$93
cell type $auto$alumacc.cc:485:replace_alu$1068
cell type $auto$alumacc.cc:485:replace_alu$1077
cell type $auto$alumacc.cc:520:replace_alu$1075
cell type $auto$alumacc.cc:75:get_eq$1073
cell type $auto$alumacc.cc:89:get_cf$1071
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:39$4
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$15
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$17
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$20
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:42$28
cell type $logic_not$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:56$95
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$19
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:40$26
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$38
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:44$42
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$56
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:48$60
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:49$74
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$84
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$89
cell type $or$/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.v:50$94
cell type $procdff$1031
cell type $procdff$1032
cell type $procdff$1034
cell type $procdff$1035
cell type $procdff$1036
cell type $procdff$1037
cell type $procdff$1038
cell type $procdff$1039
cell type $procdff$1040
cell type $procdff$1041
cell type $procdff$1045
cell type $procdff$1046
cell type $procmux$1010
cell type $procmux$1013
cell type $procmux$1016
cell type $procmux$971
cell type $procmux$974
cell type $procmux$977
cell type $procmux$980
cell type $procmux$983
cell type $procmux$986
cell type $procmux$989
cell type $procmux$995
cell type $procmux$998
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 0 unused cells and 24 unused wires.

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_sd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_sd.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_sd'.
Removed a total of 25 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 83 unused cells and 195 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module fsm_sd..
  Treeifying 42 MUXes:
    Found tree with 1 MUXes at root $0\y[0:0].
    Found tree with 1 MUXes at root $0\a[0:0].
    Found tree with 1 MUXes at root $0\c[0:0].
    Found tree with 1 MUXes at root $0\d[0:0].
    Found tree with 1 MUXes at root $0\e[0:0].
    Found tree with 1 MUXes at root $0\f[0:0].
    Found tree with 1 MUXes at root $0\g[0:0].
    Found tree with 1 MUXes at root $0\q1[2:0] [0].
    Found tree with 1 MUXes at root $0\q2[2:0] [0].
    Found tree with 1 MUXes at root $0\q2[2:0] [1].
    Found tree with 1 MUXes at root $0\q2[2:0] [2].
    Found tree with 1 MUXes at root $0\q3[2:0] [0].
    Found tree with 1 MUXes at root $0\q3[2:0] [1].
    Found tree with 1 MUXes at root $0\q3[2:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 1 MUXes at root $0\led[0:0].
    Finished treeification: Found 42 trees.
  Covering trees:
    Replaced tree at $0\y[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\a[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\c[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\e[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\f[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\g[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q1[2:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q2[2:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q2[2:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q2[2:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q3[2:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q3[2:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q3[2:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\led[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module fsm_sd:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2141 for $0\y[0:0] -> \y.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1344.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2148 for $0\a[0:0] -> \a.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1345.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2155 for $0\c[0:0] -> \c.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1346.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2162 for $0\d[0:0] -> \d.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1347.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2169 for $0\e[0:0] -> \e.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1348.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2176 for $0\f[0:0] -> \f.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1349.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2183 for $0\g[0:0] -> \g.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1350.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2190 for $0\q1[2:0] [0] -> \q1 [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1351.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2197 for $0\q2[2:0] [0] -> \q2 [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1352.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2204 for $0\q2[2:0] [1] -> \q2 [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1353.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2211 for $0\q2[2:0] [2] -> \q2 [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1354.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2218 for $0\q3[2:0] [0] -> \q3 [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1355.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2225 for $0\q3[2:0] [1] -> \q3 [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1356.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2232 for $0\q3[2:0] [2] -> \q3 [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1357.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2239 for $0\led[0:0] -> \led.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1385.

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\fsm_sd' to `<abc-temp-dir>/input.blif'..
Extracted 215 gates and 252 wires to a netlist network with 36 inputs and 38 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =      78.
ABC: Participating nodes from both networks       =     188.
ABC: Participating nodes from the first network   =      80. (  80.81 % of nodes)
ABC: Participating nodes from the second network  =     108. ( 109.09 % of nodes)
ABC: Node pairs (any polarity)                    =      80. (  80.81 % of names can be moved)
ABC: Node pairs (same polarity)                   =      77. (  77.78 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       96
ABC RESULTS:        internal signals:      178
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       38
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 334 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101010101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 192 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 96 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 975 objects in module fsm_sd (24 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \fsm_sd

4.46.2. Analyzing design hierarchy..
Top module:  \fsm_sd
Removed 0 unused modules.

4.47. Printing statistics.

=== fsm_sd ===

   Number of wires:                 88
   Number of wire bits:            152
   Number of public wires:          88
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                139
     LUT1                            3
     LUT2                           26
     LUT3                           30
     LUT4                           37
     dff                            27
     dffe                           15
     qlal4s3b_cell_macro             1

4.48. Executing CHECK pass (checking for obvious problems).
checking module fsm_sd..
Warning: Wire fsm_sd.a has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.c has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.d has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.e has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.f has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.g has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.q1 has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.q2 has an unprocessed 'init' attribute.
Warning: Wire fsm_sd.q3 has an unprocessed 'init' attribute.
found and reported 9 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on fsm_sd.clk[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port fsm_sd.a using outpad.
Mapping port fsm_sd.b using outpad.
Mapping port fsm_sd.c using outpad.
Mapping port fsm_sd.d using outpad.
Mapping port fsm_sd.e using outpad.
Mapping port fsm_sd.f using outpad.
Mapping port fsm_sd.g using outpad.
Mapping port fsm_sd.redled using outpad.
Mapping port fsm_sd.x using inpad.
Mapping port fsm_sd.y using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 0 unused cells and 13 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module fsm_sd..
found and reported 0 problems.

5. Printing statistics.

=== fsm_sd ===

   Number of wires:                151
   Number of wire bits:            151
   Number of public wires:         143
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                150
     LUT1                            3
     LUT2                           26
     LUT3                           30
     LUT4                           37
     dff                            27
     dffe                           15
     inpad                           1
     logic_0                         1
     outpad                          9
     qlal4s3b_cell_macro             1

Loading PCF from '/home/veeracharyulu/qorc-sdk/vaman/trunk/fpga/fsm_sd/fsm_sd.pcf'...
Loading pinmap CSV from '/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$fsm_sd.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$fsm_sd.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$fsm_sd.c
  outpad     | d          | 61         | X20Y3    | BIDIR    | $iopadmap$fsm_sd.d
  outpad     | e          | 60         | X22Y3    | BIDIR    | $iopadmap$fsm_sd.e
  outpad     | f          | 59         | X24Y3    | BIDIR    | $iopadmap$fsm_sd.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$fsm_sd.g
  outpad     | redled     | 34         | X22Y32   | BIDIR    | $iopadmap$fsm_sd.redled
  inpad      | x          | 56         | X28Y3    | BIDIR    | $iopadmap$fsm_sd.x
  outpad     | y          | 55         | X30Y3    | BIDIR    | $iopadmap$fsm_sd.y

6. Executing Verilog backend.
Dumping module `\fsm_sd'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\inpad for cells of type inpad.
Using template dff for cells of type dff.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$392ad25cb51043645405d50b6207dac59ee6fc10\LUT4 for cells of type LUT4.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$78a792e807544314cbd918ff3dc0665065e00762\LUT4 for cells of type LUT4.
Using template $paramod$137b9d3b3c6c733a81ffab6258d3fb787dabaec2\LUT4 for cells of type LUT4.
Using template $paramod$6d405670b23b4c2685bcba61e5b9f28a13595cbc\LUT3 for cells of type LUT3.
Using template $paramod$5406a0490d3fcc762132b74ed159b39020c81749\LUT4 for cells of type LUT4.
Using template $paramod$6e26883c94a732f25629a98baa649e8a73062a9c\LUT4 for cells of type LUT4.
Using template $paramod$962dc2ad38a9da2aa4d5d8c82dd542a1b68cf661\LUT4 for cells of type LUT4.
Using template $paramod$c3fc6ecf2ee49edeade3141f02db3291d2f6fe83\LUT4 for cells of type LUT4.
Using template $paramod$3d8388c6e77681f3dd296c4ac76cfa8c66f7077b\LUT3 for cells of type LUT3.
Using template $paramod$81b18dc250e2014551f846fe165bd14718065020\LUT3 for cells of type LUT3.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template dffe for cells of type dffe.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$6f2c4bab0e803b8b51977bf2c58cdd6bbc2de1e8\LUT3 for cells of type LUT3.
Using template $paramod$c3eb90a615d9a5a74ac528502e23010b3c580dc0\LUT3 for cells of type LUT3.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$dd8a2b77c531b683412ab69551fe9dfe668f933d\LUT4 for cells of type LUT4.
Using template $paramod$88388c6c6a4eecfc7de7604fe66ccab36e5a053a\LUT2 for cells of type LUT2.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$ef1a7edb200c1b1534825302234a1d0bce5a3341\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_sd.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_sd..
Removed 0 unused cells and 206 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== fsm_sd ===

   Number of wires:               1379
   Number of wire bits:           1496
   Number of public wires:        1349
   Number of public wire bits:    1349
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                149
     ASSP                            1
     BIDIR_CELL                     10
     C_FRAG                         37
     F_FRAG                          3
     Q_FRAG                         42
     T_FRAG                         56

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\fsm_sd'.

Warnings: 34 unique messages, 37 total
End of script. Logfile hash: b4c0f84b7c, CPU: user 1.78s system 0.04s, MEM: 273.62 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/veeracharyulu/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 63% 18x read_verilog (1 sec), 9% 4x write_verilog (0 sec), ...
